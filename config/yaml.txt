基本规则
YAML有以下基本规则：
1、大小写敏感
2、使用缩进表示层级关系
3、禁止使用tab缩进，只能使用空格键
4、缩进长度没有限制，只要元素对齐就表示这些元素属于一个层级。
5、使用#表示注释
6、字符串可以不用引号标注
1、map，散列表
使用冒号（：）表示键值对，同一缩进的所有键值对属于一个map，示例：
# YAML表示
age : 12
name : huang
# 对应的Json表示
{'age':12,'name':'huang'}
也可以将一个map写在一行：
# YAML表示
{"age":12,name:huang} #"age"表示字符串
# 对应的Json表示
{'age':12,'name':'huang'}
2、list，数组
使用连字符（-）表示：
# YAML表示
- a
- b
- 12
# 对应Json表示
['a','b',12]
也可以写在一行：
# YAML表示
[a,b,c]
# 对应Json表示
[ 'a', 'b', 'c' ]
3、scalar，纯量
数据最小的单位，不可以再分割。
数据结构嵌套
map和list的元素可以是另一个map或者list或者是纯量。由此出现4种常见的数据嵌套
1、map嵌套map
# YAML表示
websites:
 YAML: yaml.org
 Ruby: ruby-lang.org
 Python: python.org
 Perl: use.perl.org

# 对应Json表示
{ websites:
   { YAML: 'yaml.org',
     Ruby: 'ruby-lang.org',
     Python: 'python.org',
     Perl: 'use.perl.org' } }

2、map嵌套list

# YAML表示
languages:
 - Ruby
 - Perl
 - Python
 - c

# 对应Json表示
{ languages: [ 'Ruby', 'Perl', 'Python', 'c' ] }
3、list嵌套list
# YAML表示
-
  - Ruby
  - Perl
  - Python
-
  - c
  - c++
  - java

# 对应Json表示
[ [ 'Ruby', 'Perl', 'Python' ], [ 'c', 'c++', 'java' ] ]
除此以外，还可以如下表示该结构
# 方法2
- - Ruby
  - Perl
  - Python
- - c
  - c++
  - java

# 方法3
- [Ruby,Perl,Python]
- [c,c++,java]
4、list嵌套map
# YAML表示
-
  id: 1
  name: huang
-
  id: 2
  name: liao
# 对应Json表示
[ { id: 1, name: 'huang' }, { id: 2, name: 'liao' } ]
深入
#Block style表示结构体
block_style:
    clark : Evans
    ingy  : döt Net
    oren  : Ben-Kiki
如：
BlockStyle struct{
Clark string  yaml:"clark"`
Ingy:string  yaml:"ingy"`
Oren:string  yaml:"oren"`
}` yaml:"block_style"`

yaml 转 golang
data, err := ioutil.ReadFile(./xxx.yaml)
if err != nil {
entry.WithError(err).Panicln("读取文件失败")
}
bs := BlockStyle{}
if err := yaml.Unmarshal(data, &bs); err != nil {
entry.WithError(err).Panicln("反序列化失败")
}